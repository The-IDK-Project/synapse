function(find_required_library)
    cmake_parse_arguments(ARG "" "NAME;VERSION" "COMPONENTS" ${ARGN})

    if(ARG_VERSION)
        find_package(${ARG_NAME} ${ARG_VERSION} REQUIRED ${ARG_COMPONENTS})
    else()
        find_package(${ARG_NAME} REQUIRED ${ARG_COMPONENTS})
    endif()

    if(${ARG_NAME}_FOUND)
        message(STATUS "Found ${ARG_NAME}: ${${ARG_NAME}_VERSION}")
    else()
        message(FATAL_ERROR "Required library ${ARG_NAME} not found")
    endif()
endfunction()

find_required_library(Boost 1.81.0 COMPONENTS system filesystem)
find_required_library(OpenSSL 1.1.1)
find_required_library(PostgreSQL 14.0)
find_required_library(SQLite3 3.42.0)
find_required_library(CURL 7.88.1)
find_required_library(nlohmann_json 3.11.2)
find_required_library(hiredis 1.1.0)

if(BUILD_TESTS)
    find_required_library(Catch2 3.3.0)
endif()

macro(setup_imported_targets)
    if(TARGET Boost::boost)
        message(STATUS "Boost targets already imported")
    else()
        find_package(Boost REQUIRED COMPONENTS system filesystem)
    endif()

    if(TARGET OpenSSL::SSL AND TARGET OpenSSL::Crypto)
        message(STATUS "OpenSSL targets already imported")
    else()
        find_package(OpenSSL REQUIRED)
    endif()

    if(TARGET PostgreSQL::PostgreSQL)
        message(STATUS "PostgreSQL targets already imported")
    else()
        find_package(PostgreSQL REQUIRED)
    endif()

    if(TARGET SQLite::SQLite3)
        message(STATUS "SQLite3 targets already imported")
    else()
        find_package(SQLite3 REQUIRED)
    endif()

    if(TARGET CURL::libcurl)
        message(STATUS "CURL targets already imported")
    else()
        find_package(CURL REQUIRED)
    endif()

    if(TARGET hiredis::hiredis)
        message(STATUS "hiredis targets already imported")
    else()
        find_package(hiredis REQUIRED)
    endif()
endmacro()

function(check_dependencies)
    message(STATUS "Checking dependencies...")

    setup_imported_targets()

    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.0)
            message(FATAL_ERROR "GCC version must be at least 9.0")
        endif()
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 10.0)
            message(FATAL_ERROR "Clang version must be at least 10.0")
        endif()
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.20)
            message(FATAL_ERROR "MSVC version must be at least 2019")
        endif()
    else()
        message(WARNING "Unknown compiler: ${CMAKE_CXX_COMPILER_ID}")
    endif()

    message(STATUS "All dependencies found successfully")
endfunction()